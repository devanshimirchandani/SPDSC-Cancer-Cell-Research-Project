---
title: "Integrative Analysis of Colorectal Cancer Single-Cell RNA Sequencing Data"
format: html
editor: visual
code-fold: true
---

## Initial Data Processing

This code performs a Seurat-based single-cell RNA sequencing (scRNA-seq) analysis pipeline, processing gene expression data, filtering, normalizing, identifying variable genes, and performing dimensionality reduction with PCA and UMAP, followed by visualisation.

```{r message=FALSE, warning=FALSE}
# Load necessary libraries
library(Seurat)
library(dplyr)
library(ggplot2)

# Load data
gene_data <- readRDS("CrC_counts.Rds")
metadata <- readRDS("CrC_metadata.Rds")

# Check orig.ident in metadata
unique(metadata$orig.ident)

# Subset the metadata to include specific samples based on 'orig.ident'
CrC_metadata_subset <- subset(metadata, orig.ident %in% c("B001-A-301", "F007", "CRC1_8810"))

# Subset the counts data based on the cells in the filtered metadata
CrC_counts_subset <- gene_data[, rownames(CrC_metadata_subset)]

# Create the Seurat object with the subset data
crc_seurat <- CreateSeuratObject(counts = CrC_counts_subset, 
                                 meta.data = CrC_metadata_subset, 
                                 project = "CRC_analysis", 
                                 min.cells = 3, 
                                 min.features = 200)

# Add mitochondrial percentage to the Seurat object
crc_seurat[["percent.mt"]] <- PercentageFeatureSet(crc_seurat, pattern = "^MT-")

# Plot violin plots for nFeature_RNA, nCount_RNA, and percent.mt
VlnPlot(crc_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

# Filter cells with more than 200 genes and less than 5% mitochondrial content
crc_seurat <- subset(crc_seurat, subset = nFeature_RNA > 200 & percent.mt < 5)

# Normalize the gene expression data
crc_seurat <- NormalizeData(crc_seurat)

# Create feature scatter plots
plot1 <- FeatureScatter(crc_seurat, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(crc_seurat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

# Identify 2000 most variable features
crc_seurat <- FindVariableFeatures(crc_seurat, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(crc_seurat), 10)

# Plot variable features with and without labels
plot_a <- VariableFeaturePlot(crc_seurat)
plot_b <- LabelPoints(plot = plot_a, points = top10, repel = TRUE)
plot_a + plot_b

# Scale data
all.genes <- rownames(crc_seurat)
crc_seurat <- ScaleData(crc_seurat, features = all.genes)

# Run PCA
crc_seurat <- RunPCA(crc_seurat, features = VariableFeatures(crc_seurat))

# Visualize PCA loadings and plot the PCA results
VizDimLoadings(crc_seurat, dims = 1:2, reduction = "pca")
DimPlot(crc_seurat, reduction = "pca")

# Run UMAP and plot the results
crc_seurat <- RunUMAP(crc_seurat, dims = 1:10)
DimPlot(crc_seurat, reduction = "umap")

# Heatmap of the top 10 variable genes
DoHeatmap(crc_seurat, features = top10) + NoLegend()

```

## Integration

<https://satijalab.org/seurat/articles/integration_introduction>

```{r message=FALSE, warning=FALSE}

# Assuming CrC_counts and CrC_metadata contain multiple samples, subset each sample

# Subset the metadata and counts for sample 1 ("B001-A-301")
CrC_metadata_subset1 <- subset(metadata, orig.ident == "B001-A-301")
CrC_counts_subset1 <- gene_data[, rownames(CrC_metadata_subset1)]  # Subset the count data to match the metadata
crc_seurat1 <- CreateSeuratObject(counts = CrC_counts_subset1, meta.data = CrC_metadata_subset1)  # Create Seurat object for sample 1

# Subset the metadata and counts for sample 2 ("F007")
CrC_metadata_subset2 <- subset(metadata, orig.ident == "F007")
CrC_counts_subset2 <- gene_data[, rownames(CrC_metadata_subset2)]  # Subset the count data to match the metadata
crc_seurat2 <- CreateSeuratObject(counts = CrC_counts_subset2, meta.data = CrC_metadata_subset2)  # Create Seurat object for sample 2

# Subset the metadata and counts for sample 3 ("CRC1_8810")
CrC_metadata_subset3 <- subset(metadata, orig.ident == "CRC1_8810")
CrC_counts_subset3 <- gene_data[, rownames(CrC_metadata_subset3)]  # Subset the count data to match the metadata
crc_seurat3 <- CreateSeuratObject(counts = CrC_counts_subset3, meta.data = CrC_metadata_subset3)  # Create Seurat object for sample 3

# Normalize the data for each Seurat object individually
crc_seurat1 <- NormalizeData(crc_seurat1)  # Normalization for sample 1
crc_seurat2 <- NormalizeData(crc_seurat2)  # Normalization for sample 2
crc_seurat3 <- NormalizeData(crc_seurat3)  # Normalization for sample 3

# Find the 2000 most variable features for each Seurat object
crc_seurat1 <- FindVariableFeatures(crc_seurat1, selection.method = "vst", nfeatures = 2000)  # Identify variable features for sample 1
crc_seurat2 <- FindVariableFeatures(crc_seurat2, selection.method = "vst", nfeatures = 2000)  # Identify variable features for sample 2
crc_seurat3 <- FindVariableFeatures(crc_seurat3, selection.method = "vst", nfeatures = 2000)  # Identify variable features for sample 3

# Find integration anchors across the three Seurat objects
anchors <- FindIntegrationAnchors(object.list = list(crc_seurat1, crc_seurat2, crc_seurat3), dims = 1:30)

# Integrate the datasets using the identified anchors
crc_integrated <- IntegrateData(anchorset = anchors, dims = 1:30)

# Scale the integrated dataset
crc_integrated <- ScaleData(crc_integrated)

# Perform PCA (Principal Component Analysis) on the integrated dataset
crc_integrated <- RunPCA(crc_integrated, npcs = 30)

# Run UMAP (Uniform Manifold Approximation and Projection) on the integrated dataset to visualise the data in 2D space
crc_integrated <- RunUMAP(crc_integrated, reduction = "pca", dims = 1:30)

# Plot the UMAP to visualise cell clusters
DimPlot(crc_integrated, reduction = "umap")

# Visualise the top 10 variable features using a heatmap
top10_integrated <- head(VariableFeatures(crc_integrated), 10)  # Identify the top 10 variable features

DoHeatmap(crc_integrated, features = top10_integrated) + NoLegend()  # Create heatmap of the top 10 variable features

```
