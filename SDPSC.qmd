---
title: "Integrative Analysis of Colorectal Cancer Single-Cell RNA Sequencing Data"
format: html
editor: visual
code-fold: true
---

## Initial Data Processing

This code performs a Seurat-based single-cell RNA sequencing (scRNA-seq) analysis pipeline, processing gene expression data, filtering, normalizing, identifying variable genes, and performing dimensionality reduction with PCA and UMAP, followed by visualisation.

-   **Loading Libraries:**

    -   `Seurat`: A package for single-cell RNA sequencing (scRNA-seq) data analysis.

    -   `dplyr`: For data manipulation.

    -   `ggplot2`: For visualization.

-   **Loading Data:**

    -   `gene_data`: Contains the raw counts of gene expression.

    -   `metadata`: Contains metadata associated with each cell, including sample identifiers (`orig.ident`).

-   **Subsetting Data:**

    -   The unique sample identifiers (`orig.ident`) from the metadata are checked.

    -   The metadata is filtered to only include specific samples (e.g., `"B001-A-301"`, `"F007"`, `"CRC1_8810"`).

    -   The `gene_data` is subsetted to match the cells present in the filtered metadata.

-   **Creating Seurat Object:**

    -   A Seurat object is created with the subsetted gene counts and metadata. The `min.cells = 3` argument ensures that genes must be detected in at least 3 cells, and `min.features = 200` ensures that cells with fewer than 200 detected genes are excluded.

-   **Adding Mitochondrial Content:**

    -   Mitochondrial gene expression is calculated and added to the Seurat object as a new feature (`percent.mt`). Genes starting with `"MT-"` are identified as mitochondrial genes.

-   **Violin Plots:**

    -   A violin plot shows the distribution of the number of detected genes (`nFeature_RNA`), total RNA counts (`nCount_RNA`), and mitochondrial percentage (`percent.mt`) across cells.

-   **Filtering Cells:**

    -   Cells with more than 200 genes and less than 5% mitochondrial content are retained for further analysis, ensuring quality control by filtering out low-quality cells.

-   **Normalization:**

    -   The `NormalizeData()` function is applied to normalize gene expression counts using a log-normalization approach, adjusting for differences in sequencing depth across cells.

-   **Feature Scatter Plots:**

    -   Scatter plots are created to visualize relationships between RNA counts and mitochondrial content, as well as RNA counts and the number of detected genes, to assess data quality and potential confounding factors.

-   **Identifying Variable Features:**

    -   The `FindVariableFeatures()` function identifies the 2000 most variable genes (features) using the "vst" method (variance-stabilizing transformation).

    -   The top 10 most variable genes are extracted for further exploration.

-   **Variable Feature Plot:**

    -   A plot is created to visualize the variable genes, and the top 10 genes are labeled for clarity using the `LabelPoints()` function.

-   **Scaling Data:**

    -   The `ScaleData()` function standardizes the gene expression data across all cells, scaling each gene's expression to ensure comparability.

-   **Principal Component Analysis (PCA):**

    -   PCA is performed on the 2000 most variable genes to reduce the dimensionality of the data while preserving as much variability as possible.

    -   `VizDimLoadings()` visualizes PCA loadings (how much each gene contributes to the principal components), and `DimPlot()` generates a PCA plot for the first two components.

-   **UMAP (Uniform Manifold Approximation and Projection):**

    -   UMAP is run to reduce the dimensionality further and visualize the data in a two-dimensional space.

    -   The UMAP plot clusters cells based on gene expression patterns, allowing for easier visualization of similar cells.

-   **Heatmap:**

    -   A heatmap of the top 10 variable genes is generated using `DoHeatmap()`, visualizing the gene expression levels across cells. The `NoLegend()` function removes the legend for cleaner visualization.

```{r message=FALSE, warning=FALSE}
# Load necessary libraries
library(Seurat)
library(dplyr)
library(ggplot2)

# Load data
gene_data <- readRDS("CrC_counts.Rds")
metadata <- readRDS("CrC_metadata.Rds")

# Check orig.ident in metadata
unique(metadata$orig.ident)

# Subset the metadata to include specific samples based on 'orig.ident'
CrC_metadata_subset <- subset(metadata, orig.ident %in% c("B001-A-301", "F007", "CRC1_8810"))

# Subset the counts data based on the cells in the filtered metadata
CrC_counts_subset <- gene_data[, rownames(CrC_metadata_subset)]

# Create the Seurat object with the subset data
crc_seurat <- CreateSeuratObject(counts = CrC_counts_subset, 
                                 meta.data = CrC_metadata_subset, 
                                 project = "CRC_analysis", 
                                 min.cells = 3, 
                                 min.features = 200)

# Add mitochondrial percentage to the Seurat object
crc_seurat[["percent.mt"]] <- PercentageFeatureSet(crc_seurat, pattern = "^MT-")

# Plot violin plots for nFeature_RNA, nCount_RNA, and percent.mt
VlnPlot(crc_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

# Filter cells with more than 200 genes and less than 5% mitochondrial content
crc_seurat <- subset(crc_seurat, subset = nFeature_RNA > 200 & percent.mt < 5)

# Normalize the gene expression data
crc_seurat <- NormalizeData(crc_seurat)

# Create feature scatter plots
plot1 <- FeatureScatter(crc_seurat, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(crc_seurat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

# Identify 2000 most variable features
crc_seurat <- FindVariableFeatures(crc_seurat, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(crc_seurat), 10)

# Plot variable features with and without labels
plot_a <- VariableFeaturePlot(crc_seurat)
plot_b <- LabelPoints(plot = plot_a, points = top10, repel = TRUE)
plot_a + plot_b

# Scale data
all.genes <- rownames(crc_seurat)
crc_seurat <- ScaleData(crc_seurat, features = all.genes)

# Run PCA
crc_seurat <- RunPCA(crc_seurat, features = VariableFeatures(crc_seurat))

# Visualize PCA loadings and plot the PCA results
VizDimLoadings(crc_seurat, dims = 1:2, reduction = "pca")
DimPlot(crc_seurat, reduction = "pca")

# Run UMAP and plot the results
crc_seurat <- RunUMAP(crc_seurat, dims = 1:10)
DimPlot(crc_seurat, reduction = "umap")

# Heatmap of the top 10 variable genes
DoHeatmap(crc_seurat, features = top10) + NoLegend()

```

## Integration

<https://satijalab.org/seurat/articles/integration_introduction>

-   **Subsetting:** The code subsets the metadata and count data for each sample, creating individual Seurat objects.

-   **Normalization:** Each Seurat object is normalized to adjust for sequencing depth.

-   **Variable Features:** The top 2000 variable features are identified for each Seurat object.

-   **Integration Anchors:** Integration anchors are found to align the datasets.

-   **Integration:** The datasets are integrated into a single Seurat object.

-   **Scaling and PCA:** The integrated data is scaled and reduced via PCA.

-   **UMAP:** UMAP is run to visualize cell clusters.

-   **Heatmap:** Optionally, the top 10 variable genes are visualized in a heatmap.

```{r message=FALSE, warning=FALSE}

# Subset the metadata and counts for sample 1 ("B001-A-301")
CrC_metadata_subset1 <- subset(metadata, orig.ident == "B001-A-301")
CrC_counts_subset1 <- gene_data[, rownames(CrC_metadata_subset1)]  # Subset the count data to match the metadata
crc_seurat1 <- CreateSeuratObject(counts = CrC_counts_subset1, meta.data = CrC_metadata_subset1)  # Create Seurat object for sample 1

# Subset the metadata and counts for sample 2 ("F007")
CrC_metadata_subset2 <- subset(metadata, orig.ident == "F007")
CrC_counts_subset2 <- gene_data[, rownames(CrC_metadata_subset2)]  # Subset the count data to match the metadata
crc_seurat2 <- CreateSeuratObject(counts = CrC_counts_subset2, meta.data = CrC_metadata_subset2)  # Create Seurat object for sample 2

# Subset the metadata and counts for sample 3 ("CRC1_8810")
CrC_metadata_subset3 <- subset(metadata, orig.ident == "CRC1_8810")
CrC_counts_subset3 <- gene_data[, rownames(CrC_metadata_subset3)]  # Subset the count data to match the metadata
crc_seurat3 <- CreateSeuratObject(counts = CrC_counts_subset3, meta.data = CrC_metadata_subset3)  # Create Seurat object for sample 3

# Normalize the data for each Seurat object individually
crc_seurat1 <- NormalizeData(crc_seurat1)  # Normalization for sample 1
crc_seurat2 <- NormalizeData(crc_seurat2)  # Normalization for sample 2
crc_seurat3 <- NormalizeData(crc_seurat3)  # Normalization for sample 3

# Find the 2000 most variable features for each Seurat object
crc_seurat1 <- FindVariableFeatures(crc_seurat1, selection.method = "vst", nfeatures = 2000)  # Identify variable features for sample 1
crc_seurat2 <- FindVariableFeatures(crc_seurat2, selection.method = "vst", nfeatures = 2000)  # Identify variable features for sample 2
crc_seurat3 <- FindVariableFeatures(crc_seurat3, selection.method = "vst", nfeatures = 2000)  # Identify variable features for sample 3

# Find integration anchors across the three Seurat objects
anchors <- FindIntegrationAnchors(object.list = list(crc_seurat1, crc_seurat2, crc_seurat3), dims = 1:30)

# Integrate the datasets using the identified anchors
crc_integrated <- IntegrateData(anchorset = anchors, dims = 1:30)

# Scale the integrated dataset
crc_integrated <- ScaleData(crc_integrated)

# Perform PCA (Principal Component Analysis) on the integrated dataset
crc_integrated <- RunPCA(crc_integrated, npcs = 30)

# Run UMAP (Uniform Manifold Approximation and Projection) on the integrated dataset to visualise the data in 2D space
crc_integrated <- RunUMAP(crc_integrated, reduction = "pca", dims = 1:30)

# Plot the UMAP to visualise cell clusters
DimPlot(crc_integrated, reduction = "umap")

# Visualise the top 10 variable features using a heatmap
top10_integrated <- head(VariableFeatures(crc_integrated), 10)  # Identify the top 10 variable features

DoHeatmap(crc_integrated, features = top10_integrated) + NoLegend()  # Create heatmap of the top 10 variable features

```
