---
title: "SPDSC Research Project"
date: "2024-09-29"
author: "Veronica Tsou, Nancy Mnasnan Seamorntham"
format: 
  html: 
    embed-resources: true 
    code-fold: show 
    code-tools: true 
    code-line-numbers: true # Line numbers in code chunks
    df-print: paged # Sets how dataframes are automatically printed
    theme: lux # Controls the font, colours, etc.
table-of-contents: true  
number-sections: true 
---
## Data Processing
```{r}
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
```

```{r}
CrC_counts <- readRDS("CrC_counts.Rds") # load counts
CrC_metadata <- readRDS("CrC_metadata.Rds") # load metadata
```

```{r}
unique(CrC_metadata$Donor)
# group by this
```

```{r}
# create seurat object
crc_seurat <- CreateSeuratObject(counts = CrC_counts)
# add metadata to seurat object
crc_seurat <- AddMetaData(object = crc_seurat, 
                          metadata = as.data.frame(CrC_metadata))

# View the basic structure of the Seurat object
crc_seurat
```

```{r}
length(Cells(crc_seurat))
```

```{r}
length(crc_seurat@meta.data$Donor)
```

```{r}
table(crc_seurat@meta.data$Donor)
```

```{r}
# subsetting dataset - 5000 cells from each donor data
set.seed(123)  # Set seed for reproducibility 
cells_by_donor <- split(Cells(crc_seurat), crc_seurat@meta.data$Donor)
sampled_cells <- unlist(lapply(cells_by_donor, function(cells) {
  sample(cells, size = min(5000, length(cells)), replace = FALSE)
  }))

sampled_crc_seurat <- subset(crc_seurat, cells = sampled_cells)
sampled_crc_seurat
```

```{r}
# QC check - identify percentage of mitochondrial genes
sampled_crc_seurat[["percent.mt"]] <- PercentageFeatureSet(sampled_crc_seurat, 
                                                           pattern = "^MT-")
VlnPlot(sampled_crc_seurat, features = c("nFeature_RNA", "nCount_RNA", 
                                         "percent.mt"), ncol = 3) 
```

```{r}
# remove cells and genes that don't pass QC
sampled_crc_seurat <- subset(sampled_crc_seurat, 
                             subset = nFeature_RNA > 200 & percent.mt < 5)
```

```{r}
# normalise data
sampled_crc_seurat <- NormalizeData(sampled_crc_seurat)
```

```{r}
plot1 <- FeatureScatter(sampled_crc_seurat, feature1 = "nCount_RNA", 
                        feature2 = "percent.mt", group.by = "Donor")
plot2 <- FeatureScatter(sampled_crc_seurat, feature1 = "nCount_RNA", 
                        feature2 = "nFeature_RNA", group.by = "Donor")
plot1 + plot2
```

```{r}
# identify 2000 highly variable genes (HVGs)
sampled_crc_seurat <- FindVariableFeatures(sampled_crc_seurat, 
                                           selection.method = "vst", 
                                           nfeatures = 2000)

# Plot variable features and label top 10 HVGs
plot1 <- VariableFeaturePlot(sampled_crc_seurat)

top10 <- head(VariableFeatures(sampled_crc_seurat), 10)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)

plot1 + plot2
```

```{r}
# scale data
all.genes <- rownames(sampled_crc_seurat)
sampled_crc_seurat <- ScaleData(sampled_crc_seurat, features = all.genes)
sampled_crc_seurat
```

```{r}
# calculate PCA dimensions
set.seed(123) # for reproducibility
sampled_crc_seurat <- RunPCA(sampled_crc_seurat, 
                             features = VariableFeatures(sampled_crc_seurat))
```

```{r}
VizDimLoadings(sampled_crc_seurat, dims = 1:2, reduction = "pca") 
```

```{r}
DimPlot(sampled_crc_seurat, reduction = "pca", group.by = "Donor")
```

```{r}
# identify relevant number of PCs
ElbowPlot(sampled_crc_seurat, ndims = 50)
# 20 PCs seem to explain the most variation
```

```{r}
# calculate UMAP dimensions
set.seed(123) # for reproducibility
sampled_crc_seurat <- RunUMAP(sampled_crc_seurat, dims = 1:20) 
```

```{r}
# clustering before integration - just for comparison
sampled_crc_seurat <- FindNeighbors(sampled_crc_seurat, reduction = "pca", 
                                    dims = 1:20)
sampled_crc_seurat <- FindClusters(sampled_crc_seurat, resolution = 1)
DimPlot(sampled_crc_seurat, reduction = "umap", 
        group.by = c("Donor", "seurat_clusters"))
```

```{r}
# data integration by donor
# split the seurat assays by donor 
# do not need to create different seurat objects
integ_crc_seurat <- sampled_crc_seurat
integ_crc_seurat[["RNA"]] <- split(integ_crc_seurat[["RNA"]], 
                                   f = integ_crc_seurat$Donor)
integ_crc_seurat
```

```{r}
# integrate the PCA values to generate new integrated PCA values
set.seed(123)
integ_crc_seurat <- IntegrateLayers(object = integ_crc_seurat, 
                                    method = CCAIntegration, 
                                    orig.reduction = "pca", 
                                    new.reduction = "integrated.cca",
                                    verbose = FALSE)
integ_crc_seurat
```

```{r}
# rejoin the donor layers
integ_crc_seurat[["RNA"]] <- JoinLayers(integ_crc_seurat[["RNA"]])
integ_crc_seurat
```

```{r}
# clustering after integration
integ_crc_seurat <- FindNeighbors(integ_crc_seurat, 
                                  reduction = "integrated.cca", dims = 1:20)
integ_crc_seurat <- FindClusters(integ_crc_seurat, resolution = 1)
```

```{r}
# calculate UMAP from integrated PCA
set.seed(123)
integ_crc_seurat <- RunUMAP(integ_crc_seurat, dims = 1:30, 
                            reduction = "integrated.cca")

# check if data integration happened - 
# are the donor data still separate
# do you see the same clusters in cells from different donors
DimPlot(integ_crc_seurat, reduction = "umap", 
        group.by = c("Donor", "seurat_clusters"))
```

```{r}
cluster_markers <- FindAllMarkers(integ_crc_seurat, only.pos = TRUE, 
                                  min.pct = 0.25, logfc.threshold = 0.5)

# View top 10 markers per cluster
top_10_markers <- cluster_markers %>% 
  group_by(cluster) %>% 
  top_n(n = 10, wt = avg_log2FC)
```

```{r message=FALSE, warning=FALSE}
# CrC_metadata_subset1 <- subset(CrC_metadata, Donor == "B001")
# CrC_counts_subset1 <- CrC_counts[, rownames(CrC_metadata_subset1)]  # Subset the count data to match the metadata
# crc_seurat1 <- CreateSeuratObject(counts = CrC_counts_subset1, meta.data = CrC_metadata_subset1)  # Create Seurat object for sample 1
# 
# CrC_metadata_subset2 <- subset(CrC_metadata, Donor == "F")
# CrC_counts_subset2 <- CrC_counts[, rownames(CrC_metadata_subset2)]  # Subset the count data to match the metadata
# crc_seurat2 <- CreateSeuratObject(counts = CrC_counts_subset2, meta.data = CrC_metadata_subset2)  # Create Seurat object for sample 2
# 
# CrC_metadata_subset3 <- subset(CrC_metadata, Donor == "CRC1")
# CrC_counts_subset3 <- CrC_counts[, rownames(CrC_metadata_subset3)]  # Subset the count data to match the metadata
# crc_seurat3 <- CreateSeuratObject(counts = CrC_counts_subset3, meta.data = CrC_metadata_subset3)  # Create Seurat object for sample 3

```

```{r}
# # Normalize the data for each Seurat object individually
# crc_seurat1 <- NormalizeData(crc_seurat1)  # Normalization for sample 1
# crc_seurat2 <- NormalizeData(crc_seurat2)  # Normalization for sample 2
# crc_seurat3 <- NormalizeData(crc_seurat3)  # Normalization for sample 3
# 
# # Find the 2000 most variable features for each Seurat object
# crc_seurat1 <- FindVariableFeatures(crc_seurat1, selection.method = "vst", nfeatures = 2000)  # Identify variable features for sample 1
# crc_seurat2 <- FindVariableFeatures(crc_seurat2, selection.method = "vst", nfeatures = 2000)  # Identify variable features for sample 2
# crc_seurat3 <- FindVariableFeatures(crc_seurat3, selection.method = "vst", nfeatures = 2000)  # Identify variable features for sample 3
```

```{r}
# # Find integration anchors across the three Seurat objects
# anchors <- FindIntegrationAnchors(object.list = list(crc_seurat1, crc_seurat2, crc_seurat3), dims = 1:30)
# 
# # Integrate the datasets using the identified anchors
# crc_integrated <- IntegrateData(anchorset = anchors, dims = 1:30)
# 
# # Scale the integrated dataset
# crc_integrated <- ScaleData(crc_integrated)
# 
# # Perform PCA (Principal Component Analysis) on the integrated dataset
# set.seed(123)
# crc_integrated <- RunPCA(crc_integrated)
# 
# # Run UMAP  on the integrated dataset to visualise the data in 2D space
# set.seed(123)
# crc_integrated <- RunUMAP(crc_integrated, reduction = "pca", dims = 1:30)
# 
# # Plot the UMAP to visualise cell clusters
# DimPlot(crc_integrated, reduction = "umap")
# 
# # Visualise the top 10 variable features using a heatmap
# top10_integrated <- head(VariableFeatures(crc_integrated), 10)  # Identify the top 10 variable features
# 
# DoHeatmap(crc_integrated, features = top10_integrated) + NoLegend()  # Create heatmap of the top 10 variable features
```

```{r}
# crc_integrated <- RunPCA(crc_integrated, npcs = 30, verbose = FALSE)
# 
# crc_integrated <- RunUMAP(crc_integrated, dims = 1:30, reduction = "pca")
```

```{r}
# crc_integrated <- FindNeighbors(crc_integrated, reduction = "pca", dims = 1:30)
# crc_integrated <- FindClusters(crc_integrated, resolution = 0.5)
```

```{r}
# DimPlot(crc_integrated, reduction = "umap", group.by = "seurat_clusters") + ggtitle("UMAP Plot Colored by Clusters")

```

```{r}
# common_cells <- intersect(colnames(crc_seurat), colnames(crc_integrated))
# 
# # Initialize 'CellType' column in crc_integrated as NA
# crc_integrated$CellType <- NA
# 
# # Transfer 'CellType' from crc_seurat to crc_integrated for common cells
# crc_integrated$CellType[common_cells] <- crc_seurat$CellType[common_cells]
# 
# # Check if the 'CellType' column has been transferred correctly
# head(crc_integrated@meta.data$CellType)
# 
# sum(is.na(crc_integrated$CellType)) 
```

```{r}
# # View top 5 markers per cluster
# top_5_markers <- cluster_markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_log2FC)
# 
# # View top 1 marker per cluster
# top_markers <- cluster_markers %>% 
#   group_by(cluster) %>% 
#   top_n(n = 1, wt = avg_log2FC)
# 
# # Display the top marker genes for each cluster
# top_markers
```

```{r}
# Annotations -> clarify the Cell Type
crc_integrated$cell_type <- plyr::mapvalues(
  x = Idents(crc_integrated), # Cluster identities
  from = c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"),
  to = c(
    "Intestinal stem cell 1", # Cluster 0 (OLFM4)
    "Intestinal crypt stem cell", # Cluster 1 (From ACT)
    "Cluster 2", # Cluster 2
    "Enteroendocrine cell", # Cluster 3 (NR5A2)
    "Smooth muscle cell", # Cluster 4 (From ACT)
    "Epithelial cell 1", # Cluster 5 (FERMT1)
    "Goblet cell 1", # Cluster 6 (From ACT)
    "Intestinal stem cell 2", # Cluster 7 (APCDD1, CEMIP)
    "Monocyte", # Cluster 8 (From ACT)
    "Goblet cell 2", # Cluster 9 (From ACT)
    "Epithelial cell 2", # Cluster 10 (NKD1)
    "Enterocyte of colon", # Cluster 11 (From ACT)
    "Intestinal stem cell", # Cluster 12 (OLFM4)
    "Epithelial cell 3", # Cluster 13 (CDC25C)
    "Proliferating cell", # Cluster 14 (BRIP1, HELLS, BRCA2, DTL)
    "Dendritic cell, human", # Cluster 15 (From ACT)
    "Fibroblast", # Cluster 16 (From ACT)
    "Goblet cell 3", # Cluster 17 (From ACT)
    "Epithelial cell 4", # Cluster 18 (ST6GAL1)
    "CD8+ T cell", # Cluster 19 (From ACT)
    "Epithelial cell 5", # Cluster 20 (MUC4)
    "Endothelial cell of vascular tree", # Cluster 21 (From ACT)
    "Macrophage", # Cluster 22 (From ACT)
    "Goblet cell 4" # Cluster 23 (From ACT)
  )
)
```

```{r}
# DimPlot(crc_integrated, reduction = "umap", group.by = "cell_type") + ggtitle("UMAP Colored by Cell Type")
```

